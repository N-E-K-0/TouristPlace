{"version":3,"sources":["Places.js","Modal.js","Button.js","Card.js","CardList.js","App.js","serviceWorker.js","index.js"],"names":["place","id","name","src","details","Modal","this","props","show","className","children","alt","onClick","onClose","React","Component","Button","toggleModal","setState","isOpen","state","Card","CardList","map","user","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.44495aee.chunk.js","sourcesContent":["export const place = [\r\n\t\r\n\t{\r\n\t\tid:1,\r\n\t\tname:'Dhaka',\r\n\t\tsrc: 'Dhaka.jfif',\r\n\t\tdetails:'Dhaka, also spelled Dacca, city and capital of Bangladesh. It is located just north of the Buriganga River, a channel of the Dhaleswari River, in the south-central part of the country. Dhaka is Bangladesh’s most populous city and is one of the largest metropolises in South Asia.'\r\n\t},\r\n\t{\r\n\t\tid:2,\r\n\t\tname:'Chittagong',\r\n\t\tsrc: 'chittagong.jfif',\r\n\t\tdetails: 'Chittagong, officially called Chattogram, city that is the chief Indian Ocean port of Bangladesh. It lies about 12 miles (19 km) north of the mouth of the Karnaphuli River, in the southeastern arm of the country. Chittagong is the second largest city in Bangladesh, after Dhaka.'\r\n\t},\r\n\t{\r\n\t\tid:3,\r\n\t\tname:'Sylhet',\r\n\t\tsrc: 'sylhet.jfif',\r\n\t\tdetails: 'Sylhet, originally Srihatta, city, northeastern Bangladesh. It lies along the right bank of the Surma River.The most important town in the Surma River valley, it is connected by road and rail with Comilla, Chhatak, and Habiganj, by road with the states of Assam and Meghalaya (both in India).'\r\n\t},\r\n\t{\r\n\t\tid:4,\r\n\t\tname:'Khulna',\r\n\t\tsrc: 'khulna.jfif',\r\n\t\tdetails: 'Khulna, city, southwestern Bangladesh. It lies along the Bhairab River in the south-central Padma (Ganges [Ganga])–Jamuna (Brahmaputra) delta.An important river port and produce-collection and trade centre, it is connected by riverboat, road, and rail to the major cities of the region.'\r\n\t},\r\n\t{\r\n\t\tid:5,\r\n\t\tname:'Rajshahi',\r\n\t\tsrc: 'rajshahi.jpg',\r\n\t\tdetails: 'Rajshahi, formerly Rampur Boalia, city, west-central Bangladesh. It lies just north of the upper Padma River (Ganges [Ganga] River) and of the border with West Bengal state in India.Rajshahi was selected by the Dutch in the early 18th century as the site of a factory (trading post) and was constituted a municipali.'\r\n\t},\r\n\t{\r\n\t\tid:6,\r\n\t\tname:'Barisal',\r\n\t\tsrc: 'barisal.jpg',\r\n\t\tdetails: 'Barisal, officially called Barishal, city, south-central Bangladesh. It lies in the delta of the Padma (Ganges [Ganga]) and Jamuna (Brahmaputra) rivers on the Kirtonkhola, an offshoot of the Arial Khan River.Incorporated as a municipality in 1876, it is a trade centre, most notably for rice, jute, and fish.'\r\n\t},\r\n\t{\r\n\t\tid:7,\r\n\t\tname:'Rangpur',\r\n\t\tsrc: 'rangpur.jpg',\r\n\t\tdetails: 'Rangpur District (rangpur division) area 2370.45 sq km, located in between 25°18\\' and 25°57\\' north latitudes and in between 88°56\\' and 89°32\\' east longitudes. It is bounded by nilphamari and lalmonirhat districts on the north, gaibandha district on the south, kurigram district on the east and dinajpur district on the west.'\r\n\t},\r\n\t{\r\n\t\tid:8,\r\n\t\tname:'Mymensingh',\r\n\t\tsrc: 'mymensingh.jpg',\r\n\t\tdetails: 'Mymensingh, formerly Nasirabad, city, north-central Bangladesh. It lies on the north bank of the Old Brahmaputra River.Once known for its glass-bangle manufacture, it now has textile and steel mills. It was incorporated as a municipality in 1869.'\r\n\t}\r\n\r\n]\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Modal.css';\r\n\r\nclass Modal extends React.Component {\r\n  render() {\r\n    if(!this.props.show) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <div className=\"backdropstyle\">\r\n        <div className=\"modalstyle\">\r\n          <div>\r\n            {this.props.children}\r\n          </div>\r\n          <div>\r\n            <h1>{this.props.name}</h1>\r\n          </div>\r\n          <div>\r\n            <img src={this.props.src} alt=\"division\" />\r\n          </div>\r\n          <div className='tl'>\r\n            <p>{this.props.details}</p>\r\n          </div>\r\n          <div className=\"footer\">\r\n            <button className=\"button\" onClick={this.props.onClose}>\r\n              Close\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nModal.propTypes = {\r\n  onClose: PropTypes.func.isRequired,\r\n  show: PropTypes.bool,\r\n  children: PropTypes.node\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\nimport Modal from './Modal';\r\n\r\nclass Button extends React.Component{\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { isOpen: false }\r\n    }\r\n\r\n    toggleModal = () => {\r\n    this.setState({\r\n        isOpen: !this.state.isOpen\r\n    });\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"Button\">\r\n                <button onClick={this.toggleModal} className=\" tc grow bg-red br3 white\">\r\n                    Explore\r\n                </button>\r\n\r\n                <Modal show={this.state.isOpen}\r\n                    onClose={this.toggleModal}\r\n                    name={this.props.name} \r\n                    src={this.props.src}\r\n                    details={this.props.details} >\r\n                </Modal>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Button;","import React from 'react';\r\nimport Button from './Button';\r\n\r\nconst Card = ({id,name,src,details}) => {\r\n\treturn (\r\n\r\n\t\t<div className=\r\n\t\t\t'tc w-30 bg-white dib br3 pa3 ma2 bw2 shadow-5'\r\n\t\t>\r\n\t\t\t<img src= {src} alt ='place' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<Button name={name} src={src} details={details}/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\r\n\t)\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList= ({place}) => {\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{\r\n\t\t\t\tplace.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Card\r\n\t\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\t\tid={place[i].id} \r\n\t\t\t\t\t\t\t\tname={place[i].name}\r\n\t\t\t\t\t\t\t\tsrc={place[i].src}\r\n\t\t\t\t\t\t\t\tdetails={place[i].details}  \r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t); \r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\r\n\t\t)\r\n\t}\r\n\r\nexport default CardList;","import React,  { Component } from 'react';\r\nimport {place} from './Places';\r\nimport CardList from './CardList';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      place:place,\r\n      isOpen: false\r\n    }\r\n  }\r\n\r\n  toggleModal = () => {\r\n    this.setState({\r\n      isOpen: !this.state.isOpen\r\n    });\r\n  }\r\n\r\n  render(){\r\n\r\n    return( \r\n\r\n      <div className = 'pa1'>\r\n        <h1 className = 'f1 tc'> Travel guide </h1>\r\n        <div className = 'container'>\r\n          <img src = 'bangladesh.jpg' alt = 'bangladesh'/>\r\n        </div>\r\n        <div className=\"centered\">Bangladesh</div><br /><br /><br /><br />\r\n        <h1 className = 'f2 tc'> Tourist Places </h1>\r\n        <CardList \r\n          place = {this.state.place}\r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App; \r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\t<App />, \r\n\tdocument.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}